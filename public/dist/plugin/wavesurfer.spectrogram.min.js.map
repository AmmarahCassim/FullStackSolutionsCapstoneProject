{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///wavesurfer.spectrogram.min.js","webpack:///webpack/bootstrap 13d1c6398860074631e7","webpack:///./src/plugin/spectrogram.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","3","_classCallCheck","instance","Constructor","TypeError","value","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","FFT","bufferSize","sampleRate","windowFunc","alpha","bandwidth","sinTable","Float32Array","cosTable","windowValues","reverseTable","Uint32Array","peakBand","peak","Math","abs","cos","PI","pow","E","undefined","sin","Error","limit","bit","calculateSpectrum","buffer","rval","ival","mag","real","imag","bSi","sqrt","spectrum","k","floor","log","LN2","phaseShiftStepReal","phaseShiftStepImag","currentPhaseShiftReal","currentPhaseShiftImag","off","tr","ti","tmpReal","halfSize","fftStep","N","SpectrogramPlugin","params","ws","_this","wavesurfer","util","frequenciesDataUrl","_onScroll","e","updateScroll","_onReady","drawer","container","document","querySelector","width","pixelRatio","fftSamples","height","noverlap","createWrapper","createCanvas","render","wrapper","addEventListener","on","deferInit","isReady","unAll","un","removeEventListener","parentNode","removeChild","_this2","prevSpectrogram","wsParams","createElement","labels","labelsEl","classList","add","style","left","position","zIndex","appendChild","loadLabels","display","userSelect","webkitUserSelect","fillParent","scrollParent","overflowX","overflowY","preventDefault","relX","offsetX","layerX","fireEvent","scrollWidth","canvas","spectrCc","getContext","updateCanvasStyle","loadFrequenciesData","getFrequencies","drawSpectrogram","round","frequenciesData","my","backend","getDuration","pixels","resample","heightFactor","numberOfChannels","j","colorValue","fillStyle","fillRect","callback","channelOne","getChannelData","bufferLength","frequencies","uniqueSamplesPerPx","max","fft","currentOffset","segment","slice","array","Uint8Array","log10","push","url","_this3","ajax","data","JSON","parse","statusText","freq","toFixed","bgFill","fontSizeFreq","fontSizeUnit","fontType","textColorFreq","textColorUnit","textAlign","frequenciesHeight","getMaxY","labelIndex","step","ac","ctx","fill","textBaseline","label","freqType","units","unitType","font","fillText","x","scrollLeft","oldMatrix","columnsNumber","newMatrix","oldPiece","newPiece","column","Array","oldStart","oldEnd","newStart","newEnd","overlap","min","intColumn","default"],"mappings":"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","file":"wavesurfer.spectrogram.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"spectrogram\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"spectrogram\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"spectrogram\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*!\n * wavesurfer.js 2.0.5 (Tue Mar 27 2018 22:41:46 GMT+0200 (SAST))\n * https://github.com/katspaugh/wavesurfer.js\n * @license BSD-3-Clause\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"spectrogram\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"spectrogram\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"spectrogram\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"localhost:8080/dist/plugin/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 3);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 3:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Calculate FFT - Based on https://github.com/corbanbrook/dsp.js\n */\n/* eslint-disable complexity, no-redeclare, no-var, one-var */\nvar FFT = function FFT(bufferSize, sampleRate, windowFunc, alpha) {\n    this.bufferSize = bufferSize;\n    this.sampleRate = sampleRate;\n    this.bandwidth = 2 / bufferSize * sampleRate / 2;\n\n    this.sinTable = new Float32Array(bufferSize);\n    this.cosTable = new Float32Array(bufferSize);\n    this.windowValues = new Float32Array(bufferSize);\n    this.reverseTable = new Uint32Array(bufferSize);\n\n    this.peakBand = 0;\n    this.peak = 0;\n\n    switch (windowFunc) {\n        case 'bartlett':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = 2 / (bufferSize - 1) * ((bufferSize - 1) / 2 - Math.abs(i - (bufferSize - 1) / 2));\n            }\n            break;\n        case 'bartlettHann':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = 0.62 - 0.48 * Math.abs(i / (bufferSize - 1) - 0.5) - 0.38 * Math.cos(Math.PI * 2 * i / (bufferSize - 1));\n            }\n            break;\n        case 'blackman':\n            alpha = alpha || 0.16;\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = (1 - alpha) / 2 - 0.5 * Math.cos(Math.PI * 2 * i / (bufferSize - 1)) + alpha / 2 * Math.cos(4 * Math.PI * i / (bufferSize - 1));\n            }\n            break;\n        case 'cosine':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = Math.cos(Math.PI * i / (bufferSize - 1) - Math.PI / 2);\n            }\n            break;\n        case 'gauss':\n            alpha = alpha || 0.25;\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = Math.pow(Math.E, -0.5 * Math.pow((i - (bufferSize - 1) / 2) / (alpha * (bufferSize - 1) / 2), 2));\n            }\n            break;\n        case 'hamming':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = 0.54 - 0.46 * Math.cos(Math.PI * 2 * i / (bufferSize - 1));\n            }\n            break;\n        case 'hann':\n        case undefined:\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = 0.5 * (1 - Math.cos(Math.PI * 2 * i / (bufferSize - 1)));\n            }\n            break;\n        case 'lanczoz':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = Math.sin(Math.PI * (2 * i / (bufferSize - 1) - 1)) / (Math.PI * (2 * i / (bufferSize - 1) - 1));\n            }\n            break;\n        case 'rectangular':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = 1;\n            }\n            break;\n        case 'triangular':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = 2 / bufferSize * (bufferSize / 2 - Math.abs(i - (bufferSize - 1) / 2));\n            }\n            break;\n        default:\n            throw Error(\"No such window function '\" + windowFunc + \"'\");\n    }\n\n    var limit = 1;\n    var bit = bufferSize >> 1;\n\n    var i;\n\n    while (limit < bufferSize) {\n        for (i = 0; i < limit; i++) {\n            this.reverseTable[i + limit] = this.reverseTable[i] + bit;\n        }\n\n        limit = limit << 1;\n        bit = bit >> 1;\n    }\n\n    for (i = 0; i < bufferSize; i++) {\n        this.sinTable[i] = Math.sin(-Math.PI / i);\n        this.cosTable[i] = Math.cos(-Math.PI / i);\n    }\n\n    this.calculateSpectrum = function (buffer) {\n        // Locally scope variables for speed up\n        var bufferSize = this.bufferSize,\n            cosTable = this.cosTable,\n            sinTable = this.sinTable,\n            reverseTable = this.reverseTable,\n            real = new Float32Array(bufferSize),\n            imag = new Float32Array(bufferSize),\n            bSi = 2 / this.bufferSize,\n            sqrt = Math.sqrt,\n            rval,\n            ival,\n            mag,\n            spectrum = new Float32Array(bufferSize / 2);\n\n        var k = Math.floor(Math.log(bufferSize) / Math.LN2);\n\n        if (Math.pow(2, k) !== bufferSize) {\n            throw 'Invalid buffer size, must be a power of 2.';\n        }\n        if (bufferSize !== buffer.length) {\n            throw 'Supplied buffer is not the same size as defined FFT. FFT Size: ' + bufferSize + ' Buffer Size: ' + buffer.length;\n        }\n\n        var halfSize = 1,\n            phaseShiftStepReal,\n            phaseShiftStepImag,\n            currentPhaseShiftReal,\n            currentPhaseShiftImag,\n            off,\n            tr,\n            ti,\n            tmpReal;\n\n        for (var i = 0; i < bufferSize; i++) {\n            real[i] = buffer[reverseTable[i]] * this.windowValues[reverseTable[i]];\n            imag[i] = 0;\n        }\n\n        while (halfSize < bufferSize) {\n            phaseShiftStepReal = cosTable[halfSize];\n            phaseShiftStepImag = sinTable[halfSize];\n\n            currentPhaseShiftReal = 1;\n            currentPhaseShiftImag = 0;\n\n            for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n                var i = fftStep;\n\n                while (i < bufferSize) {\n                    off = i + halfSize;\n                    tr = currentPhaseShiftReal * real[off] - currentPhaseShiftImag * imag[off];\n                    ti = currentPhaseShiftReal * imag[off] + currentPhaseShiftImag * real[off];\n\n                    real[off] = real[i] - tr;\n                    imag[off] = imag[i] - ti;\n                    real[i] += tr;\n                    imag[i] += ti;\n\n                    i += halfSize << 1;\n                }\n\n                tmpReal = currentPhaseShiftReal;\n                currentPhaseShiftReal = tmpReal * phaseShiftStepReal - currentPhaseShiftImag * phaseShiftStepImag;\n                currentPhaseShiftImag = tmpReal * phaseShiftStepImag + currentPhaseShiftImag * phaseShiftStepReal;\n            }\n\n            halfSize = halfSize << 1;\n        }\n\n        for (var i = 0, N = bufferSize / 2; i < N; i++) {\n            rval = real[i];\n            ival = imag[i];\n            mag = bSi * sqrt(rval * rval + ival * ival);\n\n            if (mag > this.peak) {\n                this.peakBand = i;\n                this.peak = mag;\n            }\n            spectrum[i] = mag;\n        }\n        return spectrum;\n    };\n};\n/* eslint-enable complexity, no-redeclare, no-var, one-var */\n\n/**\n * @typedef {Object} SpectrogramPluginParams\n * @property {string|HTMLElement} container Selector of element or element in\n * which to render\n * @property {number} fftSamples=512 number of samples to fetch to FFT. Must be\n * a pwer of 2.\n * @property {number} noverlap Size of the overlapping window. Must be <\n * fftSamples. Auto deduced from canvas size by default.\n * @property {string} windowFunc='hann' The window function to be used. One of\n * these: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\n * `'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`\n * @property {?number} alpha Some window functions have this extra value.\n * (Between 0 and 1)\n * @property {number} pixelRatio=wavesurfer.params.pixelRatio to control the\n * size of the spectrogram in relation with its canvas. 1 = Draw on the whole\n * canvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('spectrogram')`\n */\n\n/**\n * Render a spectrogram visualisation of the audio.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import SpectrogramPlugin from 'wavesurfer.spectrogram.js';\n *\n * // commonjs\n * var SpectrogramPlugin = require('wavesurfer.spectrogram.js');\n *\n * // if you are using <script> tags\n * var SpectrogramPlugin = window.WaveSurfer.spectrogram;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     SpectrogramPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\n\nvar SpectrogramPlugin = function () {\n    _createClass(SpectrogramPlugin, null, [{\n        key: 'create',\n\n        /**\n         * Spectrogram plugin definition factory\n         *\n         * This function must be used to create a plugin definition which can be\n         * used by wavesurfer to correctly instantiate the plugin.\n         *\n         * @param  {SpectrogramPluginParams} params parameters use to initialise the plugin\n         * @return {PluginDefinition} an object representing the plugin\n         */\n        value: function create(params) {\n            return {\n                name: 'spectrogram',\n                deferInit: params && params.deferInit ? params.deferInit : false,\n                params: params,\n                staticProps: {\n                    FFT: FFT\n                },\n                instance: SpectrogramPlugin\n            };\n        }\n    }]);\n\n    function SpectrogramPlugin(params, ws) {\n        var _this = this;\n\n        _classCallCheck(this, SpectrogramPlugin);\n\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = ws.util;\n\n        this.frequenciesDataUrl = params.frequenciesDataUrl;\n        this._onScroll = function (e) {\n            _this.updateScroll(e);\n        };\n        this._onReady = function () {\n            var drawer = _this.drawer = ws.drawer;\n\n            _this.container = 'string' == typeof params.container ? document.querySelector(params.container) : params.container;\n\n            if (!_this.container) {\n                throw Error('No container for WaveSurfer spectrogram');\n            }\n\n            _this.width = drawer.width;\n            _this.pixelRatio = _this.params.pixelRatio || ws.params.pixelRatio;\n            _this.fftSamples = _this.params.fftSamples || ws.params.fftSamples || 512;\n            _this.height = _this.fftSamples / 2;\n            _this.noverlap = params.noverlap;\n            _this.windowFunc = params.windowFunc;\n            _this.alpha = params.alpha;\n\n            _this.createWrapper();\n            _this.createCanvas();\n            _this.render();\n\n            drawer.wrapper.addEventListener('scroll', _this._onScroll);\n            ws.on('redraw', function () {\n                return _this.render();\n            });\n        };\n    }\n\n    _createClass(SpectrogramPlugin, [{\n        key: 'init',\n        value: function init() {\n            // Check if ws is ready\n            if (this.wavesurfer.isReady) {\n                this._onReady();\n            }\n\n            this.wavesurfer.on('ready', this._onReady);\n        }\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            this.unAll();\n            this.wavesurfer.un('ready', this._onReady);\n            this.drawer.wrapper.removeEventListener('scroll', this._onScroll);\n            this.wavesurfer = null;\n            this.util = null;\n            this.params = null;\n            if (this.wrapper) {\n                this.wrapper.parentNode.removeChild(this.wrapper);\n                this.wrapper = null;\n            }\n        }\n    }, {\n        key: 'createWrapper',\n        value: function createWrapper() {\n            var _this2 = this;\n\n            var prevSpectrogram = this.container.querySelector('spectrogram');\n            if (prevSpectrogram) {\n                this.container.removeChild(prevSpectrogram);\n            }\n            var wsParams = this.wavesurfer.params;\n            this.wrapper = document.createElement('spectrogram');\n            // if labels are active\n            if (this.params.labels) {\n                var labelsEl = this.labelsEl = document.createElement('canvas');\n                labelsEl.classList.add('spec-labels');\n                this.drawer.style(labelsEl, {\n                    left: 0,\n                    position: 'absolute',\n                    zIndex: 9,\n                    height: this.height / this.pixelRatio + 'px',\n                    width: 55 / this.pixelRatio + 'px'\n                });\n                this.wrapper.appendChild(labelsEl);\n                // can be customized in next version\n                this.loadLabels('rgba(68,68,68,0.5)', '12px', '10px', '', '#fff', '#f7f7f7', 'center', '#specLabels');\n            }\n\n            this.drawer.style(this.wrapper, {\n                display: 'block',\n                position: 'relative',\n                userSelect: 'none',\n                webkitUserSelect: 'none',\n                height: this.height / this.pixelRatio + 'px'\n            });\n\n            if (wsParams.fillParent || wsParams.scrollParent) {\n                this.drawer.style(this.wrapper, {\n                    width: '100%',\n                    overflowX: 'hidden',\n                    overflowY: 'hidden'\n                });\n            }\n            this.container.appendChild(this.wrapper);\n\n            this.wrapper.addEventListener('click', function (e) {\n                e.preventDefault();\n                var relX = 'offsetX' in e ? e.offsetX : e.layerX;\n                _this2.fireEvent('click', relX / _this2.scrollWidth || 0);\n            });\n        }\n    }, {\n        key: 'createCanvas',\n        value: function createCanvas() {\n            var canvas = this.canvas = this.wrapper.appendChild(document.createElement('canvas'));\n\n            this.spectrCc = canvas.getContext('2d');\n\n            this.util.style(canvas, {\n                position: 'absolute',\n                zIndex: 4\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            this.updateCanvasStyle();\n\n            if (this.frequenciesDataUrl) {\n                this.loadFrequenciesData(this.frequenciesDataUrl);\n            } else {\n                this.getFrequencies(this.drawSpectrogram);\n            }\n        }\n    }, {\n        key: 'updateCanvasStyle',\n        value: function updateCanvasStyle() {\n            var width = Math.round(this.width / this.pixelRatio) + 'px';\n            this.canvas.width = this.width;\n            this.canvas.height = this.height;\n            this.canvas.style.width = width;\n        }\n    }, {\n        key: 'drawSpectrogram',\n        value: function drawSpectrogram(frequenciesData, my) {\n            var spectrCc = my.spectrCc;\n            var length = my.wavesurfer.backend.getDuration();\n            var height = my.height;\n            var pixels = my.resample(frequenciesData);\n            var heightFactor = my.buffer ? 2 / my.buffer.numberOfChannels : 1;\n            var i = void 0;\n            var j = void 0;\n\n            for (i = 0; i < pixels.length; i++) {\n                for (j = 0; j < pixels[i].length; j++) {\n                    var colorValue = 255 - pixels[i][j];\n                    my.spectrCc.fillStyle = 'rgb(' + colorValue + ', ' + colorValue + ', ' + colorValue + ')';\n                    my.spectrCc.fillRect(i, height - j * heightFactor, 1, heightFactor);\n                }\n            }\n        }\n    }, {\n        key: 'getFrequencies',\n        value: function getFrequencies(callback) {\n            var fftSamples = this.fftSamples;\n            var buffer = this.buffer = this.wavesurfer.backend.buffer;\n            var channelOne = buffer.getChannelData(0);\n            var bufferLength = buffer.length;\n            var sampleRate = buffer.sampleRate;\n            var frequencies = [];\n\n            if (!buffer) {\n                this.fireEvent('error', 'Web Audio buffer is not available');\n                return;\n            }\n\n            var noverlap = this.noverlap;\n            if (!noverlap) {\n                var uniqueSamplesPerPx = buffer.length / this.canvas.width;\n                noverlap = Math.max(0, Math.round(fftSamples - uniqueSamplesPerPx));\n            }\n\n            var fft = new FFT(fftSamples, sampleRate, this.windowFunc, this.alpha);\n            var maxSlicesCount = Math.floor(bufferLength / (fftSamples - noverlap));\n            var currentOffset = 0;\n\n            while (currentOffset + fftSamples < channelOne.length) {\n                var segment = channelOne.slice(currentOffset, currentOffset + fftSamples);\n                var spectrum = fft.calculateSpectrum(segment);\n                var array = new Uint8Array(fftSamples / 2);\n                var j = void 0;\n                for (j = 0; j < fftSamples / 2; j++) {\n                    array[j] = Math.max(-255, Math.log10(spectrum[j]) * 45);\n                }\n                frequencies.push(array);\n                currentOffset += fftSamples - noverlap;\n            }\n            callback(frequencies, this);\n        }\n    }, {\n        key: 'loadFrequenciesData',\n        value: function loadFrequenciesData(url) {\n            var _this3 = this;\n\n            var ajax = this.util.ajax({ url: url });\n\n            ajax.on('success', function (data) {\n                return _this3.drawSpectrogram(JSON.parse(data), _this3);\n            });\n            ajax.on('error', function (e) {\n                return _this3.fireEvent('error', 'XHR error: ' + e.target.statusText);\n            });\n\n            return ajax;\n        }\n    }, {\n        key: 'freqType',\n        value: function freqType(freq) {\n            return freq >= 1000 ? (freq / 1000).toFixed(1) : Math.round(freq);\n        }\n    }, {\n        key: 'unitType',\n        value: function unitType(freq) {\n            return freq >= 1000 ? 'KHz' : 'Hz';\n        }\n    }, {\n        key: 'loadLabels',\n        value: function loadLabels(bgFill, fontSizeFreq, fontSizeUnit, fontType, textColorFreq, textColorUnit, textAlign, container) {\n            var frequenciesHeight = this.height;\n            bgFill = bgFill || 'rgba(68,68,68,0)';\n            fontSizeFreq = fontSizeFreq || '12px';\n            fontSizeUnit = fontSizeUnit || '10px';\n            fontType = fontType || 'Helvetica';\n            textColorFreq = textColorFreq || '#fff';\n            textColorUnit = textColorUnit || '#fff';\n            textAlign = textAlign || 'center';\n            container = container || '#specLabels';\n            var getMaxY = frequenciesHeight || 512;\n            var labelIndex = 5 * (getMaxY / 256);\n            var freqStart = 0;\n            var step = (this.wavesurfer.backend.ac.sampleRate / 2 - freqStart) / labelIndex;\n\n            var ctx = this.labelsEl.getContext('2d');\n            this.labelsEl.height = this.height;\n            this.labelsEl.width = 55;\n\n            ctx.fillStyle = bgFill;\n            ctx.fillRect(0, 0, 55, getMaxY);\n            ctx.fill();\n            var i = void 0;\n\n            for (i = 0; i <= labelIndex; i++) {\n                ctx.textAlign = textAlign;\n                ctx.textBaseline = 'middle';\n\n                var freq = freqStart + step * i;\n                var index = Math.round(freq / (this.sampleRate / 2) * this.fftSamples);\n                var label = this.freqType(freq);\n                var units = this.unitType(freq);\n                var x = 16;\n                var yLabelOffset = 2;\n\n                if (i == 0) {\n                    ctx.fillStyle = textColorUnit;\n                    ctx.font = fontSizeUnit + ' ' + fontType;\n                    ctx.fillText(units, x + 24, getMaxY + i - 10);\n                    ctx.fillStyle = textColorFreq;\n                    ctx.font = fontSizeFreq + ' ' + fontType;\n                    ctx.fillText(label, x, getMaxY + i - 10);\n                } else {\n                    ctx.fillStyle = textColorUnit;\n                    ctx.font = fontSizeUnit + ' ' + fontType;\n                    ctx.fillText(units, x + 24, getMaxY - i * 50 + yLabelOffset);\n                    ctx.fillStyle = textColorFreq;\n                    ctx.font = fontSizeFreq + ' ' + fontType;\n                    ctx.fillText(label, x, getMaxY - i * 50 + yLabelOffset);\n                }\n            }\n        }\n    }, {\n        key: 'updateScroll',\n        value: function updateScroll(e) {\n            if (this.wrapper) {\n                this.wrapper.scrollLeft = e.target.scrollLeft;\n            }\n        }\n    }, {\n        key: 'resample',\n        value: function resample(oldMatrix) {\n            var columnsNumber = this.width;\n            var newMatrix = [];\n\n            var oldPiece = 1 / oldMatrix.length;\n            var newPiece = 1 / columnsNumber;\n            var i = void 0;\n\n            for (i = 0; i < columnsNumber; i++) {\n                var column = new Array(oldMatrix[0].length);\n                var j = void 0;\n\n                for (j = 0; j < oldMatrix.length; j++) {\n                    var oldStart = j * oldPiece;\n                    var oldEnd = oldStart + oldPiece;\n                    var newStart = i * newPiece;\n                    var newEnd = newStart + newPiece;\n\n                    var overlap = oldEnd <= newStart || newEnd <= oldStart ? 0 : Math.min(Math.max(oldEnd, newStart), Math.max(newEnd, oldStart)) - Math.max(Math.min(oldEnd, newStart), Math.min(newEnd, oldStart));\n                    var k = void 0;\n                    /* eslint-disable max-depth */\n                    if (overlap > 0) {\n                        for (k = 0; k < oldMatrix[0].length; k++) {\n                            if (column[k] == null) {\n                                column[k] = 0;\n                            }\n                            column[k] += overlap / newPiece * oldMatrix[j][k];\n                        }\n                    }\n                    /* eslint-enable max-depth */\n                }\n\n                var intColumn = new Uint8Array(oldMatrix[0].length);\n                var m = void 0;\n\n                for (m = 0; m < oldMatrix[0].length; m++) {\n                    intColumn[m] = column[m];\n                }\n\n                newMatrix.push(intColumn);\n            }\n\n            return newMatrix;\n        }\n    }]);\n\n    return SpectrogramPlugin;\n}();\n\nexports.default = SpectrogramPlugin;\nmodule.exports = exports['default'];\n\n/***/ })\n\n/******/ });\n});\n\n\n// WEBPACK FOOTER //\n// wavesurfer.spectrogram.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"localhost:8080/dist/plugin/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 13d1c6398860074631e7","/**\n * Calculate FFT - Based on https://github.com/corbanbrook/dsp.js\n */\n/* eslint-disable complexity, no-redeclare, no-var, one-var */\nconst FFT = function(bufferSize, sampleRate, windowFunc, alpha) {\n    this.bufferSize = bufferSize;\n    this.sampleRate = sampleRate;\n    this.bandwidth = 2 / bufferSize * sampleRate / 2;\n\n    this.sinTable = new Float32Array(bufferSize);\n    this.cosTable = new Float32Array(bufferSize);\n    this.windowValues = new Float32Array(bufferSize);\n    this.reverseTable = new Uint32Array(bufferSize);\n\n    this.peakBand = 0;\n    this.peak = 0;\n\n    switch (windowFunc) {\n        case 'bartlett':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    2 /\n                    (bufferSize - 1) *\n                    ((bufferSize - 1) / 2 - Math.abs(i - (bufferSize - 1) / 2));\n            }\n            break;\n        case 'bartlettHann':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    0.62 -\n                    0.48 * Math.abs(i / (bufferSize - 1) - 0.5) -\n                    0.38 * Math.cos(Math.PI * 2 * i / (bufferSize - 1));\n            }\n            break;\n        case 'blackman':\n            alpha = alpha || 0.16;\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    (1 - alpha) / 2 -\n                    0.5 * Math.cos(Math.PI * 2 * i / (bufferSize - 1)) +\n                    alpha / 2 * Math.cos(4 * Math.PI * i / (bufferSize - 1));\n            }\n            break;\n        case 'cosine':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = Math.cos(\n                    Math.PI * i / (bufferSize - 1) - Math.PI / 2\n                );\n            }\n            break;\n        case 'gauss':\n            alpha = alpha || 0.25;\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = Math.pow(\n                    Math.E,\n                    -0.5 *\n                        Math.pow(\n                            (i - (bufferSize - 1) / 2) /\n                                (alpha * (bufferSize - 1) / 2),\n                            2\n                        )\n                );\n            }\n            break;\n        case 'hamming':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    0.54 - 0.46 * Math.cos(Math.PI * 2 * i / (bufferSize - 1));\n            }\n            break;\n        case 'hann':\n        case undefined:\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    0.5 * (1 - Math.cos(Math.PI * 2 * i / (bufferSize - 1)));\n            }\n            break;\n        case 'lanczoz':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    Math.sin(Math.PI * (2 * i / (bufferSize - 1) - 1)) /\n                    (Math.PI * (2 * i / (bufferSize - 1) - 1));\n            }\n            break;\n        case 'rectangular':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = 1;\n            }\n            break;\n        case 'triangular':\n            for (var i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    2 /\n                    bufferSize *\n                    (bufferSize / 2 - Math.abs(i - (bufferSize - 1) / 2));\n            }\n            break;\n        default:\n            throw Error(\"No such window function '\" + windowFunc + \"'\");\n    }\n\n    var limit = 1;\n    var bit = bufferSize >> 1;\n\n    var i;\n\n    while (limit < bufferSize) {\n        for (i = 0; i < limit; i++) {\n            this.reverseTable[i + limit] = this.reverseTable[i] + bit;\n        }\n\n        limit = limit << 1;\n        bit = bit >> 1;\n    }\n\n    for (i = 0; i < bufferSize; i++) {\n        this.sinTable[i] = Math.sin(-Math.PI / i);\n        this.cosTable[i] = Math.cos(-Math.PI / i);\n    }\n\n    this.calculateSpectrum = function(buffer) {\n        // Locally scope variables for speed up\n        var bufferSize = this.bufferSize,\n            cosTable = this.cosTable,\n            sinTable = this.sinTable,\n            reverseTable = this.reverseTable,\n            real = new Float32Array(bufferSize),\n            imag = new Float32Array(bufferSize),\n            bSi = 2 / this.bufferSize,\n            sqrt = Math.sqrt,\n            rval,\n            ival,\n            mag,\n            spectrum = new Float32Array(bufferSize / 2);\n\n        var k = Math.floor(Math.log(bufferSize) / Math.LN2);\n\n        if (Math.pow(2, k) !== bufferSize) {\n            throw 'Invalid buffer size, must be a power of 2.';\n        }\n        if (bufferSize !== buffer.length) {\n            throw 'Supplied buffer is not the same size as defined FFT. FFT Size: ' +\n                bufferSize +\n                ' Buffer Size: ' +\n                buffer.length;\n        }\n\n        var halfSize = 1,\n            phaseShiftStepReal,\n            phaseShiftStepImag,\n            currentPhaseShiftReal,\n            currentPhaseShiftImag,\n            off,\n            tr,\n            ti,\n            tmpReal;\n\n        for (var i = 0; i < bufferSize; i++) {\n            real[i] =\n                buffer[reverseTable[i]] * this.windowValues[reverseTable[i]];\n            imag[i] = 0;\n        }\n\n        while (halfSize < bufferSize) {\n            phaseShiftStepReal = cosTable[halfSize];\n            phaseShiftStepImag = sinTable[halfSize];\n\n            currentPhaseShiftReal = 1;\n            currentPhaseShiftImag = 0;\n\n            for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n                var i = fftStep;\n\n                while (i < bufferSize) {\n                    off = i + halfSize;\n                    tr =\n                        currentPhaseShiftReal * real[off] -\n                        currentPhaseShiftImag * imag[off];\n                    ti =\n                        currentPhaseShiftReal * imag[off] +\n                        currentPhaseShiftImag * real[off];\n\n                    real[off] = real[i] - tr;\n                    imag[off] = imag[i] - ti;\n                    real[i] += tr;\n                    imag[i] += ti;\n\n                    i += halfSize << 1;\n                }\n\n                tmpReal = currentPhaseShiftReal;\n                currentPhaseShiftReal =\n                    tmpReal * phaseShiftStepReal -\n                    currentPhaseShiftImag * phaseShiftStepImag;\n                currentPhaseShiftImag =\n                    tmpReal * phaseShiftStepImag +\n                    currentPhaseShiftImag * phaseShiftStepReal;\n            }\n\n            halfSize = halfSize << 1;\n        }\n\n        for (var i = 0, N = bufferSize / 2; i < N; i++) {\n            rval = real[i];\n            ival = imag[i];\n            mag = bSi * sqrt(rval * rval + ival * ival);\n\n            if (mag > this.peak) {\n                this.peakBand = i;\n                this.peak = mag;\n            }\n            spectrum[i] = mag;\n        }\n        return spectrum;\n    };\n};\n/* eslint-enable complexity, no-redeclare, no-var, one-var */\n\n/**\n * @typedef {Object} SpectrogramPluginParams\n * @property {string|HTMLElement} container Selector of element or element in\n * which to render\n * @property {number} fftSamples=512 number of samples to fetch to FFT. Must be\n * a pwer of 2.\n * @property {number} noverlap Size of the overlapping window. Must be <\n * fftSamples. Auto deduced from canvas size by default.\n * @property {string} windowFunc='hann' The window function to be used. One of\n * these: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\n * `'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`\n * @property {?number} alpha Some window functions have this extra value.\n * (Between 0 and 1)\n * @property {number} pixelRatio=wavesurfer.params.pixelRatio to control the\n * size of the spectrogram in relation with its canvas. 1 = Draw on the whole\n * canvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('spectrogram')`\n */\n\n/**\n * Render a spectrogram visualisation of the audio.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import SpectrogramPlugin from 'wavesurfer.spectrogram.js';\n *\n * // commonjs\n * var SpectrogramPlugin = require('wavesurfer.spectrogram.js');\n *\n * // if you are using <script> tags\n * var SpectrogramPlugin = window.WaveSurfer.spectrogram;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     SpectrogramPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class SpectrogramPlugin {\n    /**\n     * Spectrogram plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {SpectrogramPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'spectrogram',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                FFT: FFT\n            },\n            instance: SpectrogramPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = ws.util;\n\n        this.frequenciesDataUrl = params.frequenciesDataUrl;\n        this._onScroll = e => {\n            this.updateScroll(e);\n        };\n        this._onReady = () => {\n            const drawer = (this.drawer = ws.drawer);\n\n            this.container =\n                'string' == typeof params.container\n                    ? document.querySelector(params.container)\n                    : params.container;\n\n            if (!this.container) {\n                throw Error('No container for WaveSurfer spectrogram');\n            }\n\n            this.width = drawer.width;\n            this.pixelRatio = this.params.pixelRatio || ws.params.pixelRatio;\n            this.fftSamples =\n                this.params.fftSamples || ws.params.fftSamples || 512;\n            this.height = this.fftSamples / 2;\n            this.noverlap = params.noverlap;\n            this.windowFunc = params.windowFunc;\n            this.alpha = params.alpha;\n\n            this.createWrapper();\n            this.createCanvas();\n            this.render();\n\n            drawer.wrapper.addEventListener('scroll', this._onScroll);\n            ws.on('redraw', () => this.render());\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onReady();\n        }\n\n        this.wavesurfer.on('ready', this._onReady);\n    }\n\n    destroy() {\n        this.unAll();\n        this.wavesurfer.un('ready', this._onReady);\n        this.drawer.wrapper.removeEventListener('scroll', this._onScroll);\n        this.wavesurfer = null;\n        this.util = null;\n        this.params = null;\n        if (this.wrapper) {\n            this.wrapper.parentNode.removeChild(this.wrapper);\n            this.wrapper = null;\n        }\n    }\n\n    createWrapper() {\n        const prevSpectrogram = this.container.querySelector('spectrogram');\n        if (prevSpectrogram) {\n            this.container.removeChild(prevSpectrogram);\n        }\n        const wsParams = this.wavesurfer.params;\n        this.wrapper = document.createElement('spectrogram');\n        // if labels are active\n        if (this.params.labels) {\n            const labelsEl = (this.labelsEl = document.createElement('canvas'));\n            labelsEl.classList.add('spec-labels');\n            this.drawer.style(labelsEl, {\n                left: 0,\n                position: 'absolute',\n                zIndex: 9,\n                height: `${this.height / this.pixelRatio}px`,\n                width: `${55 / this.pixelRatio}px`\n            });\n            this.wrapper.appendChild(labelsEl);\n            // can be customized in next version\n            this.loadLabels(\n                'rgba(68,68,68,0.5)',\n                '12px',\n                '10px',\n                '',\n                '#fff',\n                '#f7f7f7',\n                'center',\n                '#specLabels'\n            );\n        }\n\n        this.drawer.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: `${this.height / this.pixelRatio}px`\n        });\n\n        if (wsParams.fillParent || wsParams.scrollParent) {\n            this.drawer.style(this.wrapper, {\n                width: '100%',\n                overflowX: 'hidden',\n                overflowY: 'hidden'\n            });\n        }\n        this.container.appendChild(this.wrapper);\n\n        this.wrapper.addEventListener('click', e => {\n            e.preventDefault();\n            const relX = 'offsetX' in e ? e.offsetX : e.layerX;\n            this.fireEvent('click', relX / this.scrollWidth || 0);\n        });\n    }\n\n    createCanvas() {\n        const canvas = (this.canvas = this.wrapper.appendChild(\n            document.createElement('canvas')\n        ));\n\n        this.spectrCc = canvas.getContext('2d');\n\n        this.util.style(canvas, {\n            position: 'absolute',\n            zIndex: 4\n        });\n    }\n\n    render() {\n        this.updateCanvasStyle();\n\n        if (this.frequenciesDataUrl) {\n            this.loadFrequenciesData(this.frequenciesDataUrl);\n        } else {\n            this.getFrequencies(this.drawSpectrogram);\n        }\n    }\n\n    updateCanvasStyle() {\n        const width = Math.round(this.width / this.pixelRatio) + 'px';\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n        this.canvas.style.width = width;\n    }\n\n    drawSpectrogram(frequenciesData, my) {\n        const spectrCc = my.spectrCc;\n        const length = my.wavesurfer.backend.getDuration();\n        const height = my.height;\n        const pixels = my.resample(frequenciesData);\n        const heightFactor = my.buffer ? 2 / my.buffer.numberOfChannels : 1;\n        let i;\n        let j;\n\n        for (i = 0; i < pixels.length; i++) {\n            for (j = 0; j < pixels[i].length; j++) {\n                const colorValue = 255 - pixels[i][j];\n                my.spectrCc.fillStyle =\n                    'rgb(' +\n                    colorValue +\n                    ', ' +\n                    colorValue +\n                    ', ' +\n                    colorValue +\n                    ')';\n                my.spectrCc.fillRect(\n                    i,\n                    height - j * heightFactor,\n                    1,\n                    heightFactor\n                );\n            }\n        }\n    }\n\n    getFrequencies(callback) {\n        const fftSamples = this.fftSamples;\n        const buffer = (this.buffer = this.wavesurfer.backend.buffer);\n        const channelOne = buffer.getChannelData(0);\n        const bufferLength = buffer.length;\n        const sampleRate = buffer.sampleRate;\n        const frequencies = [];\n\n        if (!buffer) {\n            this.fireEvent('error', 'Web Audio buffer is not available');\n            return;\n        }\n\n        let noverlap = this.noverlap;\n        if (!noverlap) {\n            const uniqueSamplesPerPx = buffer.length / this.canvas.width;\n            noverlap = Math.max(0, Math.round(fftSamples - uniqueSamplesPerPx));\n        }\n\n        const fft = new FFT(\n            fftSamples,\n            sampleRate,\n            this.windowFunc,\n            this.alpha\n        );\n        const maxSlicesCount = Math.floor(\n            bufferLength / (fftSamples - noverlap)\n        );\n        let currentOffset = 0;\n\n        while (currentOffset + fftSamples < channelOne.length) {\n            const segment = channelOne.slice(\n                currentOffset,\n                currentOffset + fftSamples\n            );\n            const spectrum = fft.calculateSpectrum(segment);\n            const array = new Uint8Array(fftSamples / 2);\n            let j;\n            for (j = 0; j < fftSamples / 2; j++) {\n                array[j] = Math.max(-255, Math.log10(spectrum[j]) * 45);\n            }\n            frequencies.push(array);\n            currentOffset += fftSamples - noverlap;\n        }\n        callback(frequencies, this);\n    }\n\n    loadFrequenciesData(url) {\n        const ajax = this.util.ajax({ url: url });\n\n        ajax.on('success', data =>\n            this.drawSpectrogram(JSON.parse(data), this)\n        );\n        ajax.on('error', e =>\n            this.fireEvent('error', 'XHR error: ' + e.target.statusText)\n        );\n\n        return ajax;\n    }\n\n    freqType(freq) {\n        return freq >= 1000 ? (freq / 1000).toFixed(1) : Math.round(freq);\n    }\n\n    unitType(freq) {\n        return freq >= 1000 ? 'KHz' : 'Hz';\n    }\n\n    loadLabels(\n        bgFill,\n        fontSizeFreq,\n        fontSizeUnit,\n        fontType,\n        textColorFreq,\n        textColorUnit,\n        textAlign,\n        container\n    ) {\n        const frequenciesHeight = this.height;\n        bgFill = bgFill || 'rgba(68,68,68,0)';\n        fontSizeFreq = fontSizeFreq || '12px';\n        fontSizeUnit = fontSizeUnit || '10px';\n        fontType = fontType || 'Helvetica';\n        textColorFreq = textColorFreq || '#fff';\n        textColorUnit = textColorUnit || '#fff';\n        textAlign = textAlign || 'center';\n        container = container || '#specLabels';\n        const getMaxY = frequenciesHeight || 512;\n        const labelIndex = 5 * (getMaxY / 256);\n        const freqStart = 0;\n        const step =\n            (this.wavesurfer.backend.ac.sampleRate / 2 - freqStart) /\n            labelIndex;\n\n        const ctx = this.labelsEl.getContext('2d');\n        this.labelsEl.height = this.height;\n        this.labelsEl.width = 55;\n\n        ctx.fillStyle = bgFill;\n        ctx.fillRect(0, 0, 55, getMaxY);\n        ctx.fill();\n        let i;\n\n        for (i = 0; i <= labelIndex; i++) {\n            ctx.textAlign = textAlign;\n            ctx.textBaseline = 'middle';\n\n            const freq = freqStart + step * i;\n            const index = Math.round(\n                freq / (this.sampleRate / 2) * this.fftSamples\n            );\n            const label = this.freqType(freq);\n            const units = this.unitType(freq);\n            const x = 16;\n            const yLabelOffset = 2;\n\n            if (i == 0) {\n                ctx.fillStyle = textColorUnit;\n                ctx.font = fontSizeUnit + ' ' + fontType;\n                ctx.fillText(units, x + 24, getMaxY + i - 10);\n                ctx.fillStyle = textColorFreq;\n                ctx.font = fontSizeFreq + ' ' + fontType;\n                ctx.fillText(label, x, getMaxY + i - 10);\n            } else {\n                ctx.fillStyle = textColorUnit;\n                ctx.font = fontSizeUnit + ' ' + fontType;\n                ctx.fillText(units, x + 24, getMaxY - i * 50 + yLabelOffset);\n                ctx.fillStyle = textColorFreq;\n                ctx.font = fontSizeFreq + ' ' + fontType;\n                ctx.fillText(label, x, getMaxY - i * 50 + yLabelOffset);\n            }\n        }\n    }\n\n    updateScroll(e) {\n        if (this.wrapper) {\n            this.wrapper.scrollLeft = e.target.scrollLeft;\n        }\n    }\n\n    resample(oldMatrix) {\n        const columnsNumber = this.width;\n        const newMatrix = [];\n\n        const oldPiece = 1 / oldMatrix.length;\n        const newPiece = 1 / columnsNumber;\n        let i;\n\n        for (i = 0; i < columnsNumber; i++) {\n            const column = new Array(oldMatrix[0].length);\n            let j;\n\n            for (j = 0; j < oldMatrix.length; j++) {\n                const oldStart = j * oldPiece;\n                const oldEnd = oldStart + oldPiece;\n                const newStart = i * newPiece;\n                const newEnd = newStart + newPiece;\n\n                const overlap =\n                    oldEnd <= newStart || newEnd <= oldStart\n                        ? 0\n                        : Math.min(\n                              Math.max(oldEnd, newStart),\n                              Math.max(newEnd, oldStart)\n                          ) -\n                          Math.max(\n                              Math.min(oldEnd, newStart),\n                              Math.min(newEnd, oldStart)\n                          );\n                let k;\n                /* eslint-disable max-depth */\n                if (overlap > 0) {\n                    for (k = 0; k < oldMatrix[0].length; k++) {\n                        if (column[k] == null) {\n                            column[k] = 0;\n                        }\n                        column[k] += overlap / newPiece * oldMatrix[j][k];\n                    }\n                }\n                /* eslint-enable max-depth */\n            }\n\n            const intColumn = new Uint8Array(oldMatrix[0].length);\n            let m;\n\n            for (m = 0; m < oldMatrix[0].length; m++) {\n                intColumn[m] = column[m];\n            }\n\n            newMatrix.push(intColumn);\n        }\n\n        return newMatrix;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugin/spectrogram.js"],"sourceRoot":""}